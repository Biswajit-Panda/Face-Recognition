# -*- coding: utf-8 -*-
"""Copy of identify face using face_recognition module

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bt1RRG7rohyYpSqR-IR3lPiOXL7hYZtl
"""

!pip install face_recognition

import face_recognition
import os
import cv2

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

KNOWN_FACES_DIR = '/content/drive/My Drive/Colab Notebooks/known_faces'
# UNKNOWN_FACES_DIR = '/content/unknown_faces'
video = cv2.VideoCapture('/content/drive/My Drive/Colab Notebooks/my_input.mp4')
# video.set(cv2.CAP_PROP_POS_FRAMES, 1000);
TOLERANCE = 0.55
FRAME_THICKNESS = 2
FONT_THICKNESS = 2
MODEL = 'cnn'

known_faces = []
known_names = []

for name in os.listdir(KNOWN_FACES_DIR):
  for filename in os.listdir(f'{KNOWN_FACES_DIR}/{name}'):
    print(f'{KNOWN_FACES_DIR}/{name}/{filename}')
    image = face_recognition.load_image_file(f'{KNOWN_FACES_DIR}/{name}/{filename}')
    encoding = face_recognition.face_encodings(image)[0]
    known_faces.append(encoding)
    known_names.append(name)

fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter('/content/drive/My Drive/Colab Notebooks/v4_7.avi', fourcc, 60, (640,480),True)
a = 0
while video.isOpened():
  # print(filename)
  # image = face_recognition.load_image_file(f'{UNKNOWN_FACES_DIR}/{filename}')
  ret, image = video.read()
  # plt.imshow(image)
  if ret == True:
      
    locations = face_recognition.face_locations(image,1, model=MODEL)
    encoding = face_recognition.face_encodings(image, locations)
    
    # img = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    img = image


    for face_encoding, face_location in zip(encoding, locations):
      result = face_recognition.compare_faces(known_faces, face_encoding, tolerance=TOLERANCE)
      match = None
      if True in result:
        match = known_names[result.index(True)]
        # print(f'match found at {match}')

        top_left = (face_location[3], face_location[0])
        bottom_right = (face_location[1], face_location[2])
        cv2.rectangle(img, top_left, bottom_right, (0,255,0), FRAME_THICKNESS)
        top_left = (face_location[3], face_location[2])
        bottom_right = (face_location[1], face_location[2]+22)
        cv2.rectangle(img, top_left, bottom_right, (0,255,0), cv2.FILLED)
        cv2.putText(img, match, (face_location[3]+10,face_location[2]+15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200,200,200), FONT_THICKNESS)
        
      else:
        # print('match not found')
        top_left = (face_location[3], face_location[0])
        bottom_right = (face_location[1], face_location[2])
        cv2.rectangle(img, top_left, bottom_right, (0,255,0), FRAME_THICKNESS)
        top_left = (face_location[3], face_location[2])
        bottom_right = (face_location[1], face_location[2]+22)
        cv2.rectangle(img, top_left, bottom_right, (0,255,0), cv2.FILLED)
        cv2.putText(img, "UNKNOWN", (face_location[3]+10,face_location[2]+15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200,200,200), FONT_THICKNESS)
        out.write(img)

    if True:
      print(a)
      out.write(img)
    # plt.figure(figsize=(8,8))
    # plt.imshow(img)
    a += 1
    # print(a)
    # if a == 2:
    #   print('end')
    
  else:
    break
video.release()
out.release()
cv2.destroyAllWindows()
print('complete')

len(known_faces[0])

known_faces[0]

